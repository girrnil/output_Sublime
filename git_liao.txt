Git教程

简介：
   免费的分布式版本控制系统。

下载地址：
   https://git-scm.com/downloads

一 安装：
 
 Linux
 
#测试是否安装；
    git
#安装
    sudo apt-get install git.


 windows  
#安装 
   从Git官网直接下载安装程序，然后按默认选项安装即可。

#安装成功测试
   安装完成后，在开始菜单里找到“Git”->“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功.

  #添加用户名及邮箱；
$ git config --global user.name "your name"# irrnil
$ git config --global user.email "girrnil@gmail.com"

二 创建版本库

# 创建一个空目录
$ mkdir learngit
$ cd learngit
$ pwd

# pwd 用于显示当前目录
# 如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。

# 通过git init命令把这个目录变成Git可以管理的仓库
$ git init

# 如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见。

# 把文件添加到版本库

# 编写一个readme.txt文件
 Git is a version control system.
 Git is free software.

#放到learngit目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件。

# 把文件添加到仓库：
$ git add readme.txt

# 执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。

# 把文件提交到仓库
$ git commit -m "wrote a readme file"
# -m后面输入的是本次提交的说明，可以输入任意内容。

# commit可以一次提交很多文件，所以可以多次add不同的文件。
$ git add file1.txt
$ git add file2.txt file3.txt
$ git commit -m "add 3 files."

版本修改与回退

# 修改readme.txt文件
Git is a distributed version control system.
Git is free software.

# 查看仓库当前状态
$ git status

# 查看具体的修改内容
$ git diff readme.txt 

# 添加修改
$ git add readme.txt

# 查看当前仓库的状态
$ git status
# 提示将要被提交的修改包括readme.txt

# 提交
$ git commit -m "add distributed"

$ git status

# 修改readme.txt文件
Git is a distributed version control system.
Git is free software distributed under the GPL.

# 提交：
$ git add readme.txt
$ git commit -m "append GPL"

# 查看所有提交版本
$ git log

# 简化输出信息
$ git log --pretty=oneline

3628164fb26d48395383f8f31179f24e0882e1e0 append GPL
ea34578d5496d7dd233c827ed32a8cd576c5ee85 add distributed
cb926e7ea50ad11b8f9e909c05226233bf755030 wrote a readme file

# 在Git中，用HEAD表示当前版本
# 上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。

# 把当前版本“append GPL”回退到上一个版本“add distributed”
$ git reset --hard HEAD^

# 查看回退版本是否正确
$ cat readme.txt

# 查看当前版本库状态
$ git log

# 回退到最新版本append GPL
# 找到append GPL的commit id：3628164...
$ git reset --hard 3628164

# 查看readme.txt内容
$ cat readme.txt


工作区和暂存

# 在工作区新增一个LICENSE文本文件
 #LICENSE
This is another test for git.

$ git status

$ git add readme.txt
$ git add LICENSE.txt
$ git status
$ git coommit -m "understand how stage works"

$ git status
$ cat LICENSE.txt

管理修改
# git commit只负责提交暂存区的修改

#对readme.txt做一个修改 

# 修改前
$ cat readme.txt
Git is a distributed version control system.
Git is free software distributed under the GPL.
Git has a mutable index called stage.

#修改后
$ cat readme.txt
Git is a distributed version control system.
Git is free software distributed under the GPL.
Git has a mutable index called stage.
Git tracks changes.

# 添加
$ git add readme.txt
$ git status

#修改readme.txt
$ cat readme.txt 
Git is a distributed version control system.
Git is free software distributed under the GPL.
Git has a mutable index called stage.
Git tracks changes of files

# 提交
$ git commit -m "git tracks changes"
$ git status

# 查看工作区和版本库里面最新版本的区别
$ git diff HEAD -- readme.txt

#提交第二次修改
$ git add readme.txt

撤销修改

$ cat readme.txt
Git is a distributed version control system.
Git is free software distributed under the GPL.
Git has a mutable index called stage.
Git tracks changes of files.
My stupid boss still prefers SVN.

$ git status

# 撤销：至上一状态
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

$ git checkout -- readme.txt
$ cat readme.txt

# git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令

# 要撤销的内容已git add至暂存区
$ cat readme.txt
Git is a distributed version control system.
Git is free software distributed under the GPL.
Git has a mutable index called stage.
Git tracks changes of files.
My stupid boss still prefers SVN.

$ git add readme.txt

$ git status

# 将暂存区的修改撤销掉（unstage）
$ git reset HEAD readme.txt


删除文件

# 添加一个新文件test.txt到Git并提交
$ git add test.txt
$ git commit -m "add test.txt" 

# 删除
# 一般情况下，通常直接在文件管理器中把没用的文件删了，或者用rm命令删了；
$ rm test.txt

$ git status

# 从版本库中删除该文件
$ git rm test.txt
$ git commit -m "remove test.txt"

# 把误删的文件恢复到最新版本
$ git checkout -- test.txt

远程仓库
# 将本地git交给GitHub远程托管；
# 本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：
# 创建SSH Key。

# 在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
$ ssh-keygen -t rsa -C "youremail@example.com" 
# girrnil@gmail.com
# 你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。
# 如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。

# 登陆GitHub，打开“Account settings”，“SSH Keys”页面：
# 点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：
# GitHub需要SSH Key 是因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议。GitHub允许你添加多个Key。

远程添加库
# 登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库
# 在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：
# 在本地的learngit仓库下运行命令
$ git remote add origin git@github.com:girrnil/learngit.git
# 远程库的名字就是origin，这是Git默认的叫法，也可以改成别的

# 把本地库的所有内容推送到远程库上
$ git push -u origin master

由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

# 从现在起，只要本地作了提交，就可以通过命令：
$ git push origin master

# SSH警告
#  当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：
# 输入yes回车即可


Git 提示fatal: remote origin already exists 错误解决办法

# 1、先删除远程 Git 仓库

$ git remote rm origin

# 2、再添加远程 Git 仓库

$ git remote add origin git@github.com:FBing/java-code-generator

# 如果执行 git remote rm origin 报错的话，我们可以手动修改gitconfig文件的内容

$ vi .git/config
# 把 [remote “origin”] 那一行删掉

从远程库克隆

# 登陆GitHub，创建一个新的仓库，名字叫gitskills
# 勾选Initialize this repository with a README，这样GitHub会自动为我们创建一个README.md文件。
# 用命令git clone克隆一个本地库

$ git clone git@github.com:girrnil/gitskills.git
$ cd gitskills
$ ls

分支管理

创建与合并分支

# 1 创建dev分支，然后切换到dev分支
$ git checkout -b dev

# git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
$ git branch dev
git checkout dev

# 2 用git branch命令查看当前分支：
$ git branch
# git branch命令会列出所有分支，当前分支前面会标一个*号。

# 在dev分支上正常提交，比如对readme.txt做个修改，加上一行：Creating a new branch is quick.
$ git add readme.txt 
$ git commit -m "branch test"

# 现在，dev分支的工作完成，我们就可以切换回master分支：
$ git checkout master

$ cat readme.txt

# 把dev分支的工作成果合并到master分支上：
$ git merge dev

# 合并完成后，就可以放心地删除dev分支了：
$ git branch -d dev

# 删除后，查看branch，就只剩下master分支了：

$ git branch

# 因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。

解决冲突


从本地删除git远程仓库里面的文件
# 将远程代码pull到本地
$ git pull

# 删掉要删除的文件
$ git rm ***.txt

# 提交
$ git commit -m "for test"

# 将更改push到远程
$ git push

在本地e:\output_Sublime中创建仓库
$ cd /e/output_Sublime/
$ git init
